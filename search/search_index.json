{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"goodwe-connector","text":"<p>A python library to connect with Goodwe API Rest and get production data of solar panels.</p>"},{"location":"#a-how-to-use","title":"A. How to use.","text":""},{"location":"#a1-create-json-file-goodwe_configjson-like-this-with-the-following-fields","title":"A.1. Create JSON file 'goodwe_config.json' like this, with the following fields:","text":"<ul> <li>System Id</li> <li>Account</li> <li>Password</li> </ul> <p>Example of goodwe_config.json</p> <pre><code>{\n    \"goodwe_api_connection\":{\n        \"system_id\":\"\",\n        \"account\":\"\",\n        \"password\":\"\"\n    }\n}\n</code></pre>"},{"location":"#a2-open-examplepy-and-edit-to-call-the-goodew_connector-package-functions","title":"A.2. Open example.py and edit to call the goodew_connector package functions:","text":"<p>Run the example.py with python:</p> <p>Script execution with linux file:</p> <pre><code>python3 example.py\n</code></pre> <p>Similar ouput like this:</p> <pre><code>Day 14/02/2023  Power Generated: 9.1 kW\n</code></pre>"},{"location":"#b-generate-documentation","title":"B. Generate documentation.","text":"<ul> <li>Build documentation:</li> </ul> <pre><code>mkdocs build\n</code></pre> <ul> <li>Serve:</li> </ul> <pre><code>mkdocs serve\n</code></pre>"},{"location":"#c-extra-information-goodew-api","title":"C. Extra information: Goodew Api","text":"<p>Goodwe Api information:</p> <ul> <li>http://www.goodwe-power.com:82/Help</li> <li>http://www.goodwe-power.com:82/swagger/ui/index</li> </ul>"},{"location":"goodwe_connector/","title":"Goodwe Connector","text":""},{"location":"goodwe_connector/#goodwe_connector.goodwe_api.GoodweApi","title":"<code>GoodweApi</code>","text":"<p>         Bases: <code>GoodweApiAuth</code></p> <p>summary</p> Source code in <code>goodwe_connector/goodwe_api.py</code> <pre><code>class GoodweApi(GoodweApiAuth):\n\"\"\"_summary_\n    \"\"\"\n\n    def __init__(self,\n                 system_id:str, \n                 account:str, \n                 password:str, \n                 logging=False) -&gt; None:\n\n        self.__n_max_request_retry = 5\n\n        super().__init__(system_id, account, password,logging)\n\n    def __call(self, url, payload) -&gt; dict:\n\n        try:\n\n            if not self._authorization():\n                return None\n\n            headers = {\n                'User-Agent': 'SEMS Portal/3.1 (iPhone; iOS 13.5.1; Scale/2.00)',\n                'Token': self._credentials,\n            }\n\n            request = requests.post(\n                self.base_url + url, \n                headers=headers, \n                data=payload, \n                timeout=10)\n\n            request.raise_for_status()\n\n            self._logger.info(f'Method request elapsed seconds: {request.elapsed}')\n\n            data = request.json()\n            request.close()\n\n            return data['data']\n\n        except JSONDecodeError as json_decoder_error:\n            self._logger.warning(f'{json_decoder_error}')\n            return None\n\n        except RequestException as e:\n            self._logger.warning(f'{e}')\n            return None\n\n    # TODO: Pending to move this logic to power_generation_per_day.py\n    def get_power_generation_per_day(self, date:datetime) -&gt; dict:\n\"\"\"_summary_\n\n        Args:\n            date (datetime): _description_\n\n        Returns:\n            float: _description_\n        \"\"\"\n\n        payload = {\n            'powerstation_id' : self.system_id,\n            'date' : date.strftime('%Y-%m-%d')\n        }\n\n        generation = {}\n        count_request = 0\n        data = {}\n\n        while(not data and count_request &lt; self.__n_max_request_retry):\n\n            count_request += 1\n            method = GetPowerStationPowerAndIncomeByDay\n            data = self.__call(method, payload)\n\n            if not data:\n                self._logger.warning(f'Request count={count_request}, Method: {method}, missing data.')\n\n        # Parsing data to extract the correct day.\n        for day in data:\n            if day['d'] == date.strftime('%m/%d/%Y'):\n\n                Key_date = date.strftime('%Y-%m-%d')\n                value = day['p']\n\n                generation[Key_date] = value\n\n                return generation\n\n        return generation\n\n    # TODO: Pending to move this logic to power_generation_between_dates_to_csv.py\n    def get_power_generation_between_dates_to_csv(self, \n                                           start_date:datetime, \n                                           end_date:datetime,\n                                           file_name:str,\n                                           show_info:bool = True) -&gt; None:\n        generation = {}\n\n        delta = timedelta(days=1)\n\n        while start_date &lt;= end_date:\n\n            payload = {\n                'powerstation_id' : self.system_id,\n                'date' : start_date.strftime('%Y-%m-%d')\n            }\n\n            count_request = 0\n            data = {}\n\n            while(not data and count_request &lt; self.__n_max_request_retry):\n\n                count_request += 1\n                method = GetPowerStationPowerAndIncomeByDay\n                data = self.__call(method, payload)\n\n                if not data:\n                    self._logger.warning(f'Request count={count_request}, Method: {method}, missing data.')\n\n            # Parsing data and extracting day.\n            for day in data:\n                if day['d'] == start_date.strftime('%m/%d/%Y'):\n                    generation[start_date.strftime('%Y-%m-%d')] = day['p']\n\n            start_date += delta\n            count_request = 0\n            data = {}\n\n        dataframe = pd.DataFrame(generation.items(), columns=['Date', 'ProductionkWh'])\n\n        dataframe.to_csv(file_name, index=False, sep=\";\", decimal=\",\")\n\n        if show_info:\n            average = sum(generation.values())/len(generation.keys())\n            average_str = '{:.2f}'.format(average)\n            total_power_generated = '{:.2f}'.format(sum(generation.values()))\n\n            print(f'Generated {total_power_generated} kWh (avg. {average_str} kWh per day) in {len(generation.keys())} days.')\n\n    # TODO: Pending to move this logic to power_generation_between_dates.py\n    def get_power_generation_between_dates(self, \n                                           start_date:datetime, \n                                           end_date:datetime) -&gt; dict:\n        generation = {}\n\n        delta = timedelta(days=1)\n\n        while start_date &lt;= end_date:\n\n            payload = {\n                'powerstation_id' : self.system_id,\n                'date' : start_date.strftime('%Y-%m-%d')\n            }\n\n            count_request = 0\n            data = {}\n\n            while(not data and count_request &lt; self.__n_max_request_retry):\n\n                count_request += 1\n                method = GetPowerStationPowerAndIncomeByDay\n                data = self.__call(method, payload)\n\n                if not data:\n                    self._logger.warning(f'Request count={count_request}, Method: {method}, missing data.')\n\n            # Parsing data and extracting day.\n            for day in data:\n                if day['d'] == start_date.strftime('%m/%d/%Y'):\n                    generation[start_date.strftime('%Y-%m-%d')] = day['p']\n\n            start_date += delta\n            count_request = 0\n            data = {}\n\n        average = sum(generation.values())/len(generation.keys())\n        average_str = '{:.2f}'.format(average)\n        total_power_generated = '{:.2f}'.format(sum(generation.values()))\n\n        print(f'Generated {total_power_generated} kWh (avg. {average_str} kWh per day) in {len(generation.keys())} days.')\n\n        return generation\n\n    def get_power_station_generated_every_five_minutes_per_day(self, date:datetime) -&gt; dict:\n\n        day_powers = {} \n\n        day = date.strftime('%Y-%m-%d')\n\n        payload = {\n            'id' : self.system_id,\n            'date' : day\n        }\n\n        count_request = 0\n        data = {}\n\n        while(not data and count_request &lt; self.__n_max_request_retry):\n\n            count_request += 1\n            method = GetPowerStationPacByDayForApp\n            data = self.__call(method, payload)\n\n            if not data:\n                self._logger.warning(f'Request count={count_request}, Method: {method}, missing data.')\n\n        if (not data or \"pacs\" not in data or not data['pacs']):\n\n            day_powers['NO_DATA'] = 0\n\n            return day_powers\n\n        for item in data['pacs']:\n\n            aux_date = date.strptime(item['date'], '%m/%d/%Y %H:%M:%S')\n            key_day = aux_date.strftime('%Y-%m-%d %H:%M:%S')\n\n            day_powers[key_day] = int(item['pac'])\n\n        return day_powers\n\n    def get_power_station_monitor_detail(self, year:int, month:int) -&gt; dict:\n\n        data_returned = {} \n\n        if year &lt; 0 or month &lt; 1 or month &gt; 12:\n            print(f'Error! Month: {month}. Year: {year}')\n            return data_returned\n\n        print(f'Month : {month} | Year: {year}')\n\n        date = datetime(year=year, month=month, day=1)\n        date_str = date.strftime(\"%Y-%m-%d\")\n\n        payload = {\n            # \"date\": \"2023-04-1\",\n            'date' : date_str,\n            \"is_report\": 2,\n            \"page_index\": 1,\n            \"page_size\": 5\n        }\n\n        count_request = 0\n        data = {}\n\n        while(not data and count_request &lt; self.__n_max_request_retry):\n\n            count_request += 1\n            method = ReportDataV1GetPowerStationPowerReportDetialByMonth\n            data = self.__call(method, payload)\n\n            if not data:\n                self._logger.warning(f'Request count={count_request}, Method: {method}, missing data.')\n\n        if (not data):\n\n            data_returned['NO_DATA'] = 0\n\n            return data_returned\n\n        power_stations_info = []\n\n        # print(json.dumps(data, indent=2))\n\n        for item in data['list']:\n            power_stations_info.append({\n                'PowerStationId': item['pw_id'],\n                'PowerStationOwnerId': item['owner_id'],\n                'PowerStationInformation' :  item['pw_name'],\n                'PowerStationAddress' :  item['address'],\n                'PowerStationKwCapacity' :  item['capacity'],\n                'PowerStationMonthPower' :  item['month_power'],\n                'PowerStationTotalPower' :  item['total_power'],\n                'ContactEmail' :  item['email'],\n            })\n\n        return power_stations_info\n</code></pre>"},{"location":"goodwe_connector/#goodwe_connector.goodwe_api.GoodweApi.get_power_generation_per_day","title":"<code>get_power_generation_per_day(date)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>datetime</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>dict</code> <p>description</p> Source code in <code>goodwe_connector/goodwe_api.py</code> <pre><code>def get_power_generation_per_day(self, date:datetime) -&gt; dict:\n\"\"\"_summary_\n\n    Args:\n        date (datetime): _description_\n\n    Returns:\n        float: _description_\n    \"\"\"\n\n    payload = {\n        'powerstation_id' : self.system_id,\n        'date' : date.strftime('%Y-%m-%d')\n    }\n\n    generation = {}\n    count_request = 0\n    data = {}\n\n    while(not data and count_request &lt; self.__n_max_request_retry):\n\n        count_request += 1\n        method = GetPowerStationPowerAndIncomeByDay\n        data = self.__call(method, payload)\n\n        if not data:\n            self._logger.warning(f'Request count={count_request}, Method: {method}, missing data.')\n\n    # Parsing data to extract the correct day.\n    for day in data:\n        if day['d'] == date.strftime('%m/%d/%Y'):\n\n            Key_date = date.strftime('%Y-%m-%d')\n            value = day['p']\n\n            generation[Key_date] = value\n\n            return generation\n\n    return generation\n</code></pre>"}]}